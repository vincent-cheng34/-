import pandas as pd   #导入pandas数据库
x = pd.read_excel('./cumcm2018c1.xlsx')    #导入第一张表数据
x.shape   #第一张表查看数据形状
x.keys()    #第一张表查看键
#第一张表去重
x = x.drop_duplicates()    #无重复值
x
#第一张表缺失值处理
x.isnull().sum()   #第一张表有缺失值
x = x.dropna()   #第一张表删除缺失值
x     #打印
#第一张表异常值处理
x['csrq'].dtype    #查看出生日期的数据类型
pd.Timestamp.max    #查看时间的范围
#第二张表处理
y = pd.read_csv('./cumcm2018c2.csv')   #导入第二张表数据
y.shape     #第二张表查看数据形态
#第二张表异常值处理
y['je'].describe()
import matplotlib.pyplot as plt
p = plt.boxplot(y['je'])         #异常值箱线图
plt.show()
p['fliers'][0].get_ydata()  #提取异常值
#合并两张表
z = pd.merge(y,x,left_on = 'kh',right_on = 'kh')    #主键合并,left_on、right_on都是键

#任务2.1-3
task2 = pd.to_datetime(z['csrq'])   #将出生日期转换为时间格式
import datetime as dt   #导入模块
Now_year = dt.datetime.today().year    #今天的日期
Age = Now_year - task2.dt.year      #算出年龄
Age     #打印年龄
Age_group = pd.cut(Age,[15,45,59,120])    #数据分段
Age_group    #打印
Age_group = Age_group.value_counts()    #统计数量然后返回饼图
plt.pie(Age_group,labels =  ['Youth','Midlife','Elder'],autopct='%.1f%%')     #输出饼图
plt.show()

#任务2.1-4
amount = z['je'].groupby(by = Age)     #根据年龄对金额进行分类
import numpy as np
amount1 = amount.agg(np.sum)    #加总各个年龄的金额
plt.pie(amount1,labels=['Youth','Midlife','Elder'],autopct='%.1f%%')    #根据年龄分类计算各年龄段的消费金额
plt.show()

#任务2.1-5
gender = z['xb'].value_counts()     #统计性别的样本数量
plt.pie(gender,labels=['Male','Female'],autopct='%.1f%%')     #制作出性别比例饼图
plt.show()
amount_gender = z['je'].groupby(gender1)    #根据性别分类出金额数据
amount_gender1 =  amount_gender.agg(np.sum)    #统计金额
plt.pie(amount_gender1,labels=['Male','Female'],autopct='%.1f%%')    #统计female和male的消费金额做出饼图
plt.show()

#任务2.2-1
y['kh'].isnull().sum()
y['kh'].notnull().sum()
y['kh'].value_counts()
plt.pie([y['kh'].isnull().sum(),y['kh'].notnull().sum()],labels = ['member','non-member'],autopct='%.1f%%')
plt.show()

#任务2.2-2
amount_member = z['je'].sum()   #会员金额
amount_non_member = y['je'].sum() - z['je'].sum()   #非会员金额
plt.pie([amount_member, amount_non_member],labels=['member','non_member'],autopct='%.1f%%')
plt.show()

#任务2.2-3
dtime_year = pd.to_datetime(z['dtime']).dt.year    #提取出会员消费的年份
dtime_year
amount_year = z['je'].groupby(dtime_year)
amount_year1 = amount_year.agg(np.sum)   #加总各个年份的金额
amount_year1
plt.bar(['2015 Year','2016 Year','2017 Year','2018 Year'],amount_dtime1)
plt.ylabel('Amount')
plt.xlabel('Year')
plt.show()

#任务2.2-4
dtime_month = pd.to_datetime(z['dtime']).dt.month   #提取消费月份
dtime_month   #输出结果
amount_month = z['je'].groupby(by = [dtime_month,dtime_year])   #根据年月进行分类聚合
amount_month_res = amount_month.agg(np.sum)   #输出各年月份加总金额
amount_month_res
x = ['2015-01','2016-01','2017-01','2018-01',
         '2015-02','2017-02',
         '2015-03','2016-03','2017-03',
         '2015-04','2016-04','2017-04',
         '2015-05','2016-05','2017-05',
         '2015-06','2016-06','2017-06',
         '2015-07','2016-07','2017-07',
         '2015-08','2016-08','2017-08',
         '2016-09','2017-09',
         '2016-10','2017-10',
         '2016-11','2017-11',
         '2015-12','2016-12','2017-12']
plt.bar(x,amount_month_res,width=0.5)
plt.xticks(x, x, rotation=75)      #调整横坐标倾斜度
plt.ylabel('Amount')
plt.xlabel('Year-Month')
plt.show() 

#任务2.3.1
dtime_hour = pd.to_datetime(z['dtime']).dt.hour    #提取出消费时间的“小时”
amount_hour = z['je'].groupby(dtime_hour)    #根据“小时”来计算各个小时的金额
amount_hour1 = amount_hour.agg(np.sum)   #输出各个小时的消费金额
amount_hour1 
amount_morning = 547801.23+ 23925058.02+ 41099533.55   #早上的消费金额
amount_noon =  50638448.43 + 54009197.32   #中午的消费金额
amount_afternoon = 58653027.97 + 67055349.36 + 69643425.32 + 64108654.96 +  50613356.48   #下午的消费金额
amount_evening = 41809627.43 + 44854627.50 + 40631594.72 + 10385821.73 + 2021491.47  #晚上的消费金额
amount_beforedawn =  121891.20 + 124062.20 + 56770.20    #凌晨的消费金额

number_hour = z['djh'].groupby(dtime_hour)    #根据消费的“小时”来划分单据发生
number_hour.count()   #计算出各个时间的订单数
number_morning = 305 + 17865
number_noon =  30490 + 37087 
number_afternoon = 40333 + 44996 + 49701 + 51131 + 46353 
number_evening = 37663 + 31630 + 33316 + 28815 +  6573 + 1159
number_beforedawn = 53 + 34 + 7

plt.bar(['morning','noon','afternoon','evening','beforedawn'],[number_morning,number_noon,number_afternoon,number_evening,number_beforedawn])
plt.xlabel('Period of Time')
plt.ylabel('Number')
plt.show()

#任务2.3.2
number_season = z['djh'].groupby(by = [dtime_year,dtime_month])     #按照月和年划分单据号
number_season.count()     #计数
number_2015_spring = np.sum(number_season1[0:3])
number_2015_summer = np.sum(number_season1[3:6])
number_2015_fall = np.sum(number_season1[6:8])
number_2015_winter = number_season1[8]
number_2016_spring = np.sum(number_season1[9:11])
number_2016_summer = np.sum(number_season1[11:14])
number_2016_fall = np.sum(number_season1[14:17])
number_2016_winter = np.sum(number_season1[17:20])
number_2017_spring = np.sum(number_season1[20:23])
number_2017_summer = np.sum(number_season1[23:26])
number_2017_fall = np.sum(number_season1[26:29])
number_2017_winter = np.sum(number_season1[29:32])
number_2018_spring = number_season1[32]

x = ['2015 spring','2015 summer','2015 fall','2015 winter',
     '2016 spring' ,'2016 summer','2016 fall','2016 winter',
     '2017 spring','2017 summer','2017 fall','2017 winter','2018 spring']
plt.bar(x,[number_2015_spring,number_2015_summer,number_2015_fall,number_2015_winter,
           number_2016_spring,number_2016_summer,number_2016_fall,number_2016_winter,
           number_2017_spring,number_2017_summer,number_2017_fall,number_2017_winter,number_2018_spring],width = 0.5)   #绘图
plt.xticks(x,x,rotation=30)
plt.show()

#任务3
m = pd.read_excel('./用户画像.xlsx')
m['年龄'] = Age   #年龄
m['积分'] = z['jf']   #积分
m['卡号'] = z['kh']  #卡号
for i in z['xb']:
    if z['xb'].loc[i] == 0:
        m['性别'] = '男'
    else:
        m['性别'] = '女'

#任务3.2
import datetime as dt   #导入模块
Now_year = dt.datetime.today().year    #今天的日期
member_time = Now_year - z['djsj'].dt.year   #入会时长
m['入会时长'] = member_time
m['消费水平'] = z['je']
n = z['spmc']
m['购物偏好'] = n
dtime_quarter = pd.to_datetime(z['dtime']).dt.quarter 
for i in range(len(dtime_quarter)):
    line = dtime_quarter.iloc[i]
    if line == 1:
        m['购物季节偏好'] = '春季'
    elif line == 2:
        m['购物季节偏好'] = '夏季'
    elif line == 3:
        m['购物季节偏好'] = '秋季'
    elif line == 4:
        m['购物季节偏好'] = '冬季'

m.loc[20]

#任务4
file = pd.read_excel('./Model.xlsx')
file
file['入会时长'] = m['入会时长']
file['消费金额'] = m['消费水平']
file['消费季节'] = dtime_quarter
from sklearn.cluster import KMeans
model = KMeans(n_clusters = 3).fit(file)
model
model.labels_
model.cluster_centers_   #查看聚类中心
